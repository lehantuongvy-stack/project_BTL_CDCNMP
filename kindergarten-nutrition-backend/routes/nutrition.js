/**
 * Nutrition Routes - API endpoints cho qu·∫£n l√Ω h·ªì s∆° dinh d∆∞·ª°ng
 */

const url = require('url');

class NutritionRoutes {
    constructor(nutritionController, authController) {
        this.nutritionController = nutritionController;
        this.authController = authController;
    }

    /**
     * Route ch√≠nh cho /api/nutrition
     */
    async handleNutritionRoutes(req, res) {
        try {
            const parsedUrl = url.parse(req.url, true);
            const pathname = parsedUrl.pathname;
            const method = req.method;
            const query = parsedUrl.query;

            // X·ª≠ l√Ω c√°c routes c·ª• th·ªÉ
            if (pathname === '/api/nutrition/records' && method === 'GET') {
                return await this.getNutritionRecords(req, res, query);
            }

            if (pathname === '/api/nutrition/records' && method === 'POST') {
                return await this.createNutritionRecord(req, res);
            }

            if (pathname.match(/^\/api\/nutrition\/records\/\d+$/) && method === 'GET') {
                const id = pathname.split('/').pop();
                return await this.getNutritionRecordById(req, res, id);
            }

            if (pathname.match(/^\/api\/nutrition\/records\/\d+$/) && method === 'PUT') {
                const id = pathname.split('/').pop();
                return await this.updateNutritionRecord(req, res, id);
            }

            if (pathname.match(/^\/api\/nutrition\/records\/\d+$/) && method === 'DELETE') {
                const id = pathname.split('/').pop();
                return await this.deleteNutritionRecord(req, res, id);
            }

            // Routes ƒë·∫∑c bi·ªát cho child
            if (pathname.match(/^\/api\/nutrition\/child\/\d+\/records$/) && method === 'GET') {
                const childId = pathname.split('/')[4];
                return await this.getChildNutritionRecords(req, res, childId, query);
            }

            if (pathname.match(/^\/api\/nutrition\/child\/\d+\/latest$/) && method === 'GET') {
                const childId = pathname.split('/')[4];
                return await this.getLatestNutritionRecord(req, res, childId);
            }

            if (pathname.match(/^\/api\/nutrition\/child\/\d+\/growth-chart$/) && method === 'GET') {
                const childId = pathname.split('/')[4];
                return await this.getGrowthChart(req, res, childId, query);
            }

            // Routes th·ªëng k√™
            if (pathname === '/api/nutrition/stats/class' && method === 'GET') {
                return await this.getClassNutritionStats(req, res, query);
            }

            if (pathname === '/api/nutrition/stats/attention' && method === 'GET') {
                return await this.getChildrenNeedAttention(req, res);
            }

            if (pathname === '/api/nutrition/stats/overview' && method === 'GET') {
                return await this.getNutritionOverview(req, res, query);
            }

            // Th·ªëng k√™ dinh d∆∞·ª°ng theo child_id
            if (pathname.match(/^\/api\/nutrition\/stats\/[a-fA-F0-9-]+$/) && method === 'GET') {
                const childId = pathname.split('/').pop();
                return await this.getChildNutritionStats(req, res, childId, query);
            }

            // BMI Calculator
            if (pathname === '/api/nutrition/calculate-bmi' && method === 'POST') {
                return await this.calculateBMI(req, res);
            }

            // Parent routes - L·∫•y ƒë√°nh gi√° s·ª©c kh·ªèe c·ªßa t·∫•t c·∫£ con theo parent
            if (pathname === '/api/nutrition/parent/records' && method === 'GET') {
                return await this.getParentChildrenRecords(req, res, query);
            }

            // Route kh√¥ng t√¨m th·∫•y
            this.sendResponse(res, 404, {
                success: false,
                message: 'Nutrition API route not found'
            });

        } catch (error) {
            console.error('Nutrition routes error:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói server trong nutrition routes'
            });
        }
    }

    /**
     * GET /api/nutrition/records - L·∫•y danh s√°ch h·ªì s∆° dinh d∆∞·ª°ng
     */
    async getNutritionRecords(req, res, query) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const filters = {
                child_id: query.child_id,
                start_date: query.start_date,
                end_date: query.end_date,
                nutrition_status: query.nutrition_status,
                limit: query.limit,
                offset: query.offset
            };

            const records = await this.nutritionController.getNutritionRecords(filters);

            this.sendResponse(res, 200, {
                success: true,
                data: records,
                message: 'L·∫•y danh s√°ch h·ªì s∆° dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting nutrition records:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y danh s√°ch h·ªì s∆° dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * POST /api/nutrition/records - T·∫°o h·ªì s∆° dinh d∆∞·ª°ng m·ªõi
     */
    async createNutritionRecord(req, res) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            if (!['admin', 'teacher', 'nutritionist'].includes(authResult.user.role)) {
                return this.sendResponse(res, 403, {
                    success: false,
                    message: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o h·ªì s∆° dinh d∆∞·ª°ng'
                });
            }

            const body = await this.parseRequestBody(req);
            console.log('üîß Received body data:', body);
            
            const recordData = {
                ...body,
                teacher_id: authResult.user.id  // S·ª≠ d·ª•ng teacher_id thay v√¨ created_by
            };
            
            console.log('üîß Final record data:', recordData);

            const record = await this.nutritionController.createNutritionRecord(recordData);

            this.sendResponse(res, 201, {
                success: true,
                data: record,
                message: 'T·∫°o h·ªì s∆° dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error creating nutrition record:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: error.message || 'L·ªói khi t·∫°o h·ªì s∆° dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * GET /api/nutrition/records/:id - L·∫•y h·ªì s∆° dinh d∆∞·ª°ng theo ID
     */
    async getNutritionRecordById(req, res, id) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const record = await this.nutritionController.getNutritionRecordById(id);
            if (!record) {
                return this.sendResponse(res, 404, {
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y h·ªì s∆° dinh d∆∞·ª°ng'
                });
            }

            this.sendResponse(res, 200, {
                success: true,
                data: record,
                message: 'L·∫•y th√¥ng tin h·ªì s∆° dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting nutrition record by ID:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y th√¥ng tin h·ªì s∆° dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * PUT /api/nutrition/records/:id - C·∫≠p nh·∫≠t h·ªì s∆° dinh d∆∞·ª°ng
     */
    async updateNutritionRecord(req, res, id) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            if (!['admin', 'staff', 'doctor'].includes(authResult.user.role)) {
                return this.sendResponse(res, 403, {
                    success: false,
                    message: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t h·ªì s∆° dinh d∆∞·ª°ng'
                });
            }

            const body = await this.parseRequestBody(req);
            const record = await this.nutritionController.updateNutritionRecord(id, body);

            this.sendResponse(res, 200, {
                success: true,
                data: record,
                message: 'C·∫≠p nh·∫≠t h·ªì s∆° dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error updating nutrition record:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆° dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * DELETE /api/nutrition/records/:id - X√≥a h·ªì s∆° dinh d∆∞·ª°ng
     */
    async deleteNutritionRecord(req, res, id) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            if (authResult.user.role !== 'admin') {
                return this.sendResponse(res, 403, {
                    success: false,
                    message: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a h·ªì s∆° dinh d∆∞·ª°ng'
                });
            }

            await this.nutritionController.deleteNutritionRecord(id);

            this.sendResponse(res, 200, {
                success: true,
                message: 'X√≥a h·ªì s∆° dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error deleting nutrition record:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: error.message || 'L·ªói khi x√≥a h·ªì s∆° dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * GET /api/nutrition/child/:id/records - L·∫•y h·ªì s∆° dinh d∆∞·ª°ng c·ªßa tr·∫ª
     */
    async getChildNutritionRecords(req, res, childId, query) {
        try {
            const authResult = await this.authController.verifyToken(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const limit = query.limit || 10;
            const records = await this.nutritionController.getChildNutritionRecords(childId, limit);

            this.sendResponse(res, 200, {
                success: true,
                data: {
                    child_id: childId,
                    records
                },
                message: 'L·∫•y h·ªì s∆° dinh d∆∞·ª°ng c·ªßa tr·∫ª th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting child nutrition records:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y h·ªì s∆° dinh d∆∞·ª°ng c·ªßa tr·∫ª'
            });
        }
    }

    /**
     * GET /api/nutrition/child/:id/latest - L·∫•y h·ªì s∆° dinh d∆∞·ª°ng m·ªõi nh·∫•t
     */
    async getLatestNutritionRecord(req, res, childId) {
        try {
            const authResult = await this.authController.verifyToken(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const record = await this.nutritionController.getLatestNutritionRecord(childId);

            this.sendResponse(res, 200, {
                success: true,
                data: record,
                message: 'L·∫•y h·ªì s∆° dinh d∆∞·ª°ng m·ªõi nh·∫•t th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting latest nutrition record:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y h·ªì s∆° dinh d∆∞·ª°ng m·ªõi nh·∫•t'
            });
        }
    }

    /**
     * GET /api/nutrition/child/:id/growth-chart - L·∫•y bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng
     */
    async getGrowthChart(req, res, childId, query) {
        try {
            const authResult = await this.authController.verifyToken(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const months = query.months || 12;
            const chart = await this.nutritionController.getGrowthChart(childId, months);

            this.sendResponse(res, 200, {
                success: true,
                data: chart,
                message: 'L·∫•y bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting growth chart:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng'
            });
        }
    }

    /**
     * GET /api/nutrition/stats/class - Th·ªëng k√™ dinh d∆∞·ª°ng theo l·ªõp
     */
    async getClassNutritionStats(req, res, query) {
        try {
            const authResult = await this.authController.verifyToken(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const classId = query.class_id;
            if (!classId) {
                return this.sendResponse(res, 400, {
                    success: false,
                    message: 'C·∫ßn cung c·∫•p class_id'
                });
            }

            const stats = await this.nutritionController.getClassNutritionStats(classId);

            this.sendResponse(res, 200, {
                success: true,
                data: {
                    class_id: classId,
                    stats
                },
                message: 'L·∫•y th·ªëng k√™ dinh d∆∞·ª°ng theo l·ªõp th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting class nutrition stats:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y th·ªëng k√™ dinh d∆∞·ª°ng theo l·ªõp'
            });
        }
    }

    /**
     * GET /api/nutrition/stats/attention - Tr·∫ª c·∫ßn quan t√¢m ƒë·∫∑c bi·ªát
     */
    async getChildrenNeedAttention(req, res) {
        try {
            const authResult = await this.authController.verifyToken(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            if (!['admin', 'staff', 'doctor'].includes(authResult.user.vai_tro)) {
                return this.sendResponse(res, 403, {
                    success: false,
                    message: 'Kh√¥ng c√≥ quy·ªÅn xem danh s√°ch tr·∫ª c·∫ßn quan t√¢m'
                });
            }

            const children = await this.nutritionController.getChildrenNeedAttention();

            this.sendResponse(res, 200, {
                success: true,
                data: children,
                message: 'L·∫•y danh s√°ch tr·∫ª c·∫ßn quan t√¢m th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting children need attention:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y danh s√°ch tr·∫ª c·∫ßn quan t√¢m'
            });
        }
    }

    /**
     * GET /api/nutrition/stats/overview - T·ªïng quan th·ªëng k√™ dinh d∆∞·ª°ng
     */
    async getNutritionOverview(req, res, query) {
        try {
            const authResult = await this.authController.verifyToken(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const overview = await this.nutritionController.getNutritionOverview(query);

            this.sendResponse(res, 200, {
                success: true,
                data: overview,
                message: 'L·∫•y t·ªïng quan th·ªëng k√™ dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting nutrition overview:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y t·ªïng quan th·ªëng k√™ dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * POST /api/nutrition/calculate-bmi - T√≠nh BMI
     */
    async calculateBMI(req, res) {
        try {
            const body = await this.parseRequestBody(req);
            const { weight, height, age } = body;

            if (!weight || !height) {
                return this.sendResponse(res, 400, {
                    success: false,
                    message: 'C·∫ßn cung c·∫•p weight v√† height'
                });
            }

            const result = await this.nutritionController.calculateBMI(weight, height, age);

            this.sendResponse(res, 200, {
                success: true,
                data: result,
                message: 'T√≠nh BMI th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error calculating BMI:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi t√≠nh BMI'
            });
        }
    }

    /**
     * GET /api/nutrition/stats/{child_id} - Th·ªëng k√™ dinh d∆∞·ª°ng theo tr·∫ª
     */
    async getChildNutritionStats(req, res, childId, query) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            const stats = await this.nutritionController.getChildNutritionStats(childId, query);

            this.sendResponse(res, 200, {
                success: true,
                data: stats,
                message: 'L·∫•y th·ªëng k√™ dinh d∆∞·ª°ng th√†nh c√¥ng'
            });

        } catch (error) {
            console.error('Error getting child nutrition stats:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: 'L·ªói khi l·∫•y th·ªëng k√™ dinh d∆∞·ª°ng'
            });
        }
    }

    /**
     * Parse request body
     */
    async parseRequestBody(req) {
        return new Promise((resolve, reject) => {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    resolve(JSON.parse(body));
                } catch (error) {
                    reject(new Error('Invalid JSON'));
                }
            });
        });
    }

    /**
     * GET /api/nutrition/parent/records - L·∫•y ƒë√°nh gi√° s·ª©c kh·ªèe c·ªßa t·∫•t c·∫£ con theo parent
     */
    async getParentChildrenRecords(req, res, query) {
        try {
            const authResult = await this.authController.verifyTokenFromRequest(req);
            if (!authResult.success) {
                return this.sendResponse(res, 401, authResult);
            }

            // Ch·ªâ parent m·ªõi c√≥ quy·ªÅn truy c·∫≠p route n√†y
            if (authResult.user.role !== 'parent') {
                return this.sendResponse(res, 403, {
                    success: false,
                    message: 'Ch·ªâ ph·ªß huynh m·ªõi c√≥ quy·ªÅn xem th√¥ng tin n√†y'
                });
            }

            const parentId = authResult.user.id;
            
            // L·∫•y danh s√°ch t·∫•t c·∫£ con c·ªßa parent n√†y
            const childrenQuery = `
                SELECT id, full_name, date_of_birth, class_name 
                FROM children 
                WHERE parent_id = ? AND is_active = 1
                ORDER BY full_name
            `;
            
            const children = await this.nutritionController.db.query(childrenQuery, [parentId]);
            
            if (!children || children.length === 0) {
                return this.sendResponse(res, 200, {
                    success: true,
                    data: {
                        children: [],
                        message: 'Kh√¥ng t√¨m th·∫•y con n√†o trong h·ªá th·ªëng'
                    }
                });
            }

            // L·∫•y ƒë√°nh gi√° s·ª©c kh·ªèe cho t·ª´ng con
            const childrenWithRecords = await Promise.all(
                children.map(async (child) => {
                    const recordsQuery = `
                        SELECT dg.*, u.full_name as teacher_name
                        FROM danh_gia_suc_khoe dg
                        LEFT JOIN users u ON dg.teacher_id = u.id
                        WHERE dg.child_id = ?
                        ORDER BY dg.ngay_danh_gia DESC
                        LIMIT 10
                    `;
                    
                    const records = await this.nutritionController.db.query(recordsQuery, [child.id]);
                    
                    return {
                        child_info: {
                            id: child.id,
                            full_name: child.full_name,
                            date_of_birth: child.date_of_birth,
                            class_name: child.class_name
                        },
                        health_records: records || []
                    };
                })
            );

            this.sendResponse(res, 200, {
                success: true,
                data: {
                    parent_id: parentId,
                    children: childrenWithRecords,
                    total_children: children.length
                }
            });

        } catch (error) {
            console.error('Error getting parent children records:', error);
            this.sendResponse(res, 500, {
                success: false,
                message: error.message || 'L·ªói khi l·∫•y th√¥ng tin ƒë√°nh gi√° s·ª©c kh·ªèe'
            });
        }
    }

    /**
     * Send response
     */
    sendResponse(res, statusCode, data) {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Content-Type', 'application/json');
        res.writeHead(statusCode);
        res.end(JSON.stringify(data));
    }
}

module.exports = NutritionRoutes;
