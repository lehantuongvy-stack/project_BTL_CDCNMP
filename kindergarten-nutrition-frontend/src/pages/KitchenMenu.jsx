import React, { useState } from "react";
import "../styles/background.css";
import "./../styles/Menu.css";
import "./../styles/KitchenMenu.css";
import BackButton from "../components/BackButton";

function KitchenMenu() {
  const getToday = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  const getDayOfWeek = (dateString) => {
    const days = [
      "Ch·ªß Nh·∫≠t",
      "Th·ª© Hai",
      "Th·ª© Ba",
      "Th·ª© T∆∞",
      "Th·ª© NƒÉm",
      "Th·ª© S√°u",
      "Th·ª© B·∫£y",
    ];
    const date = new Date(dateString);
    return days[date.getDay()];
  };

  const [selectedDate, setSelectedDate] = useState(getToday());
  const [isEditing, setIsEditing] = useState(false);

  // Danh s√°ch m√≥n c√≥ kcal
  const breakfast = [
    { dish: "Ch√°o th·ªãt b·∫±m", kcal: 160 },
    { dish: "Ph·ªü b√≤", kcal: 200 },
    { dish: "B√∫n th·ªãt b√≤", kcal: 220 },
    { dish: "Ch√°o c√°", kcal: 150 },
    { dish: "H·ªß ti·∫øu Nam Vang", kcal: 240 },
  ];

  const lunch = [
    { dish: "C∆°m + Canh chua c√°", kcal: 300 },
    { dish: "C∆°m + Th·ªãt kho tr·ª©ng", kcal: 370 },
    { dish: "C∆°m + G√† chi√™n", kcal: 390 },
    { dish: "C∆°m + C√° kho", kcal: 330 },
    { dish: "C∆°m + Canh rau mu·ªëng", kcal: 310 },
  ];

  const brunch = [
    { dish: "S·ªØa t∆∞∆°i", kcal: 100 },
    { dish: "Chu·ªëi", kcal: 120 },
    { dish: "Yaourt", kcal: 150 },
    { dish: "B√°nh flan", kcal: 110 },
    { dish: "B√°nh bao + N∆∞·ªõc cam", kcal: 200 },
  ];

  // Data m·∫´u
  const initialData = {
   "Th·ª© Hai": {
            "Nh√† Tr·∫ª": [
              { title: "B·ªØa s√°ng", kcal: 160, dish: "Ch√°o th·ªãt b·∫±m" },
              { title: "B·ªØa tr∆∞a", kcal: 300, dish: "Ch√°o g√† h·∫ßm h·∫°t sen" },
              { title: "B·ªØa x·∫ø", kcal: 100, dish: "S·ªØa t∆∞∆°i" },
            ],
            "M·∫´u Gi√°o": [
              { title: "B·ªØa s√°ng", kcal: 220, dish: "B√∫n th·ªãt b√≤" },
              { title: "B·ªØa tr∆∞a", kcal: 360, dish: "C∆°m + Canh chua c√° + Tr·ª©ng r√°n" },
              { title: "B·ªØa x·∫ø", kcal: 200, dish: "S·ªØa t∆∞∆°i + B√°nh b√¥ng lan" },
            ],
          },
          "Th·ª© Ba": {
            "Nh√† Tr·∫ª": [
              { title: "B·ªØa s√°ng", kcal: 150, dish: "Ch√°o c√°" },
              { title: "B·ªØa tr∆∞a", kcal: 310, dish: "C∆°m + Canh rau ng√≥t + Th·ªãt kho" },
              { title: "B·ªØa x·∫ø", kcal: 120, dish: "Yaourt" },
            ],
            "M·∫´u Gi√°o": [
              { title: "B·ªØa s√°ng", kcal: 200, dish: "Ph·ªü b√≤" },
              { title: "B·ªØa tr∆∞a", kcal: 370, dish: "C∆°m + Th·ªãt kho tr·ª©ng + Canh rau mu·ªëng" },
              { title: "B·ªØa x·∫ø", kcal: 180, dish: "Chu·ªëi + S·ªØa" },
            ],
          },
          "Th·ª© T∆∞": {
            "Nh√† Tr·∫ª": [
              { title: "B·ªØa s√°ng", kcal: 170, dish: "Ch√°o g√†" },
              { title: "B·ªØa tr∆∞a", kcal: 320, dish: "C∆°m + Canh m·ªìng t∆°i + C√° r√°n" },
              { title: "B·ªØa x·∫ø", kcal: 110, dish: "B√°nh flan" },
            ],
            "M·∫´u Gi√°o": [
              { title: "B·ªØa s√°ng", kcal: 210, dish: "B√∫n ri√™u cua" },
              { title: "B·ªØa tr∆∞a", kcal: 380, dish: "C∆°m + Th·ªãt b√≤ x√†o + Canh rau c·∫£i" },
              { title: "B·ªØa x·∫ø", kcal: 190, dish: "T√°o + S·ªØa chua" },
            ],
          },
          "Th·ª© NƒÉm": {
            "Nh√† Tr·∫ª": [
              { title: "B·ªØa s√°ng", kcal: 160, dish: "Ch√°o t√¥m" },
              { title: "B·ªØa tr∆∞a", kcal: 330, dish: "C∆°m + Th·ªãt g√† + Canh rau ng√≥t" },
              { title: "B·ªØa x·∫ø", kcal: 115, dish: "Chu·ªëi ch√≠n" },
            ],
            "M·∫´u Gi√°o": [
              { title: "B·ªØa s√°ng", kcal: 230, dish: "B√°nh m√¨ + S·ªØa" },
              { title: "B·ªØa tr∆∞a", kcal: 400, dish: "C∆°m + C√° kho + Canh b√≠ ƒë·ªè" },
              { title: "B·ªØa x·∫ø", kcal: 200, dish: "B√°nh bao + N∆∞·ªõc cam" },
            ],
          },
          "Th·ª© S√°u": {
            "Nh√† Tr·∫ª": [
              { title: "B·ªØa s√°ng", kcal: 165, dish: "Ch√°o l∆∞∆°n" },
              { title: "B·ªØa tr∆∞a", kcal: 340, dish: "C∆°m + Canh chua + Th·ªãt rim" },
              { title: "B·ªØa x·∫ø", kcal: 105, dish: "B√°nh quy + S·ªØa" },
            ],
            "M·∫´u Gi√°o": [
              { title: "B·ªØa s√°ng", kcal: 240, dish: "H·ªß ti·∫øu Nam Vang" },
              { title: "B·ªØa tr∆∞a", kcal: 390, dish: "C∆°m + G√† chi√™n + Canh b√≠ xanh" },
              { title: "B·ªØa x·∫ø", kcal: 195, dish: "Xo√†i + Yaourt" },
            ],
          },
    // üëâ b·∫°n th√™m c√°c ng√†y kh√°c t∆∞∆°ng t·ª±
  };

  const [weeklyMealData, setWeeklyMealData] = useState(initialData);
  const [tempMealData, setTempMealData] = useState(null);

  // Khi ƒë·ªïi m√≥n
  const handleChange = (day, group, index, newDish) => {
    setTempMealData((prev) => {
      const updated = { ...prev };
      const mealTitle = updated[day][group][index].title;

      const menuList =
        mealTitle === "B·ªØa s√°ng" ? breakfast : mealTitle === "B·ªØa tr∆∞a" ? lunch : brunch;

      const selected = menuList.find((item) => item.dish === newDish);

      updated[day][group][index] = {
        ...updated[day][group][index],
        dish: selected.dish,
        kcal: selected.kcal,
      };

      return updated;
    });
  };

  // Render b·∫£ng tu·∫ßn
  const renderWeekTable = (data) => (
    <table className="menu-table">
      <thead>
        <tr>
          <th rowSpan="2">Th·ª©</th>
          <th colSpan="3">Nh√† Tr·∫ª</th>
          <th colSpan="3">M·∫´u Gi√°o</th>
        </tr>
        <tr>
          <th>B·ªØa s√°ng</th>
          <th>B·ªØa tr∆∞a</th>
          <th>B·ªØa x·∫ø</th>
          <th>B·ªØa s√°ng</th>
          <th>B·ªØa tr∆∞a</th>
          <th>B·ªØa x·∫ø</th>
        </tr>
      </thead>
      <tbody>
        {Object.entries(data).map(([day, groups], idx) => (
          <tr key={idx}>
            <td>{day}</td>
            {["Nh√† Tr·∫ª", "M·∫´u Gi√°o"].map((group) =>
              groups[group].map((meal, i) => (
                <td key={group + i}>
                  {isEditing ? (
                    <select
                      value={meal.dish}
                      onChange={(e) => handleChange(day, group, i, e.target.value)}
                    >
                      {(meal.title === "B·ªØa s√°ng"
                        ? breakfast
                        : meal.title === "B·ªØa tr∆∞a"
                        ? lunch
                        : brunch
                      ).map((option) => (
                        <option key={option.dish} value={option.dish}>
                          {option.dish}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <>
                      {meal.dish}
                      <div className="kcal">({meal.kcal} kcal)</div>
                    </>
                  )}
                </td>
              ))
            )}
          </tr>
        ))}
      </tbody>
    </table>
  );

  return (
    <div className="menu-container home">
      <BackButton />

      <div className="menu-header">
        <div className="menu-title">Th·ª±c ƒë∆°n</div>
        <div className="tabs">
          <button className="active">Theo Tu·∫ßn</button>
        </div>
        <div className="menu-actions">
          {/* L∆∞u */}
          <button
            className="btn-save"
            onClick={() => {
              if (tempMealData) setWeeklyMealData(tempMealData);
              setTempMealData(null);
              setIsEditing(false);
            }}
          >
            L∆∞u
          </button>

          {/* S·ª≠a / H·ªßy */}
          <button
            className="btn-edit"
            onClick={() => {
              if (isEditing) {
                // H·ªßy
                setTempMealData(null);
                setIsEditing(false);
              } else {
                // B·∫Øt ƒë·∫ßu s·ª≠a ‚Üí copy data
                setTempMealData(JSON.parse(JSON.stringify(weeklyMealData)));
                setIsEditing(true);
              }
            }}
          >
            {isEditing ? "H·ªßy" : "S·ª≠a"}
          </button>
        </div>
      </div>

      {/* Ng√†y + Th·ª© */}
      <div className="date-field">
        <label htmlFor="date">Ng√†y:</label>
        <input
          type="date"
          id="date"
          value={selectedDate}
          onChange={(e) => setSelectedDate(e.target.value)}
        />
        <span className="weekday">{getDayOfWeek(selectedDate)}</span>
      </div>

      {/* B·∫£ng tu·∫ßn */}
      {renderWeekTable(isEditing ? tempMealData : weeklyMealData)}
    </div>
  );
}

export default KitchenMenu;
