import React, { useState } from "react";
import "./../styles/HealthManager.css";
import "../styles/background.css";
import BackButton from "../components/BackButton";

// --- D·ªØ li·ªáu m·∫∑c ƒë·ªãnh ---
const DEFAULT_CHILD_INFO = {
  name: "Nguy·ªÖn VƒÉn A",
  dob: "2019-05-10",
  className: "L·ªõp 1A",
  parentName: "Nguy·ªÖn Th·ªã B",
  phone: "0123456789"
};

const DEFAULT_BMI = {
  weight: 16, // kg
  height: 100, // cm
  bmi: 16.0,
  bmiCategory: "B√¨nh th∆∞·ªùng",
  gender: "male",
  ageMonths: 52
};

const DEFAULT_ALLERGIES = ["Tr·ª©ng", "ƒê·∫≠u ph·ªông"];

const QUICK_SUGGESTIONS = ["M√® (v·ª´ng)", "Tr·ª©ng", "H·∫£i s·∫£n", "L√∫a m√¨", "ƒê·∫≠u n√†nh", "ƒê·∫≠u ph·ªông"];

const HealthManager = () => {
  // --- Th√¥ng tin h·ªçc sinh ---
  const [childInfo, setChildInfo] = useState(DEFAULT_CHILD_INFO);
  const [tempChildInfo, setTempChildInfo] = useState(childInfo);
  const [isEditing, setIsEditing] = useState(false);

  // --- BMI ---
  const [weight, setWeight] = useState(DEFAULT_BMI.weight);
  const [height, setHeight] = useState(DEFAULT_BMI.height);
  const [bmi, setBmi] = useState(DEFAULT_BMI.bmi);
  const [bmiCategory, setBmiCategory] = useState(DEFAULT_BMI.bmiCategory);
  const [gender, setGender] = useState(DEFAULT_BMI.gender);
  const [ageMonths, setAgeMonths] = useState(DEFAULT_BMI.ageMonths);
  const [isEditingBMI, setIsEditingBMI] = useState(false);

  // --- ƒÇn u·ªëng ---
  const [ateAtSchool, setAteAtSchool] = useState(false);
  const [mealPercent, setMealPercent] = useState();
  const [mealNote, setMealNote] = useState("");

  // --- D·ªã ·ª©ng ---
  const [allergies, setAllergies] = useState(DEFAULT_ALLERGIES);
  const [newAllergy, setNewAllergy] = useState("");

  // State t·∫°m th·ªùi
  const [tempBMI, setTempBMI] = useState({
    weight: weight,
    height: height,
    gender: gender,
    ageMonths: ageMonths
  });

  // --- H√†m x·ª≠ l√Ω ---
  const handleChildChange = (e) => {
    const { name, value } = e.target;
    setTempChildInfo({ ...tempChildInfo, [name]: value });
  };

  const calculateBMI = () => {
    // N·∫øu c√≥ tr∆∞·ªùng n√†o null/undefined th√¨ kh√¥ng t√≠nh
    if (!weight || !height || !gender || !ageMonths) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi l∆∞u BMI!");
      return;
    }

    const hMeters = Number(height) / 100;
    const bmiValue = Number(weight) / (hMeters * hMeters);
    setBmi(bmiValue.toFixed(1));

    if (bmiValue < 18.5) setBmiCategory("G·∫ßy");
    else if (bmiValue < 25) setBmiCategory("B√¨nh th∆∞·ªùng");
    else if (bmiValue < 30) setBmiCategory("Th·ª´a c√¢n");
    else setBmiCategory("B√©o ph√¨");

    // Sau khi l∆∞u xong, t·∫Øt ch·∫ø ƒë·ªô s·ª≠a
    setIsEditingBMI(false);
  };


  const handleAddAllergy = () => {
    if (newAllergy.trim() !== "" && !allergies.includes(newAllergy)) {
      setAllergies([...allergies, newAllergy]);
      setNewAllergy("");
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleAddAllergy();
    }
  };

  return (
    <div className="health-container home">
      {/* --- Header: th√¥ng tin h·ªçc sinh --- */}
      <div className="header">
        <BackButton />
        <div className="title-box">QU·∫¢N L√ù S·ª®C KH·ªéE</div>

        <div className="info-box">
          <p><b>Th√¥ng tin b√©</b></p>
          <div className="form-row">
            <label>H·ªç v√† t√™n:</label>
            <input
              type="text"
              name="name"
              value={tempChildInfo.name}
              onChange={handleChildChange}
              disabled={!isEditing}
            />
          </div>
          <div className="form-row">
            <label>Ng√†y sinh:</label>
            <input
              type="date"
              name="dob"
              value={tempChildInfo.dob}
              onChange={handleChildChange}
              disabled={!isEditing}
            />
          </div>
          <div className="form-row">
            <label>L·ªõp:</label>
            <input
              type="text"
              name="className"
              value={tempChildInfo.className}
              onChange={handleChildChange}
              disabled={!isEditing}
            />
          </div>
          <div className="form-row">
            <label>T√™n ph·ª• huynh:</label>
            <input
              type="text"
              name="parentName"
              value={tempChildInfo.parentName}
              onChange={handleChildChange}
              disabled={!isEditing}
            />
          </div>
          <div className="form-row">
            <label>S·ªë ƒëi·ªán tho·∫°i:</label>
            <input
              type="tel"
              name="phone"
              value={tempChildInfo.phone}
              onChange={handleChildChange}
              disabled={!isEditing}
            />
          </div>
        </div>

        <div className="header-buttons">
          <button
            className={isEditing ? "cancel" : "edit"}
            onClick={() => {
              if (isEditing) setTempChildInfo(childInfo); // H·ªßy -> quay v·ªÅ d·ªØ li·ªáu c≈©
              setIsEditing(!isEditing);
            }}
          >
            {isEditing ? "H·ªßy" : "S·ª≠a th√¥ng tin"}
          </button>

          {isEditing && (
            <button
              className="save"
              onClick={() => {
                setChildInfo({ ...tempChildInfo });
                setIsEditing(false);
                console.log("Th√¥ng tin h·ªçc sinh ƒë√£ l∆∞u:", tempChildInfo);
              }}
            >
              L∆∞u th√¥ng tin
            </button>
          )}
        </div>
      </div>

      {/* --- Form sections --- */}
      <div className="form-sections">
        {/* --- BMI --- */}
        <div className="card">
          <h3>T√≠nh BMI c·ªßa tr·∫ª</h3>

          <div className="form-row">
            <label htmlFor="weight">C√¢n n·∫∑ng (kg):</label>
            <input
              id="weight"
              type="number"
              min="1"
              value={weight}
              onChange={(e) => setWeight(e.target.value)}
              disabled={!isEditingBMI}
            />
          </div>

          <div className="form-row">
            <label htmlFor="height">Chi·ªÅu cao (cm):</label>
            <input
              id="height"
              type="number"
              min="1"
              value={height}
              onChange={(e) => setHeight(e.target.value)}
              disabled={!isEditingBMI}
            />
          </div>

          <div className="form-row">
            <label htmlFor="gender">Gi·ªõi t√≠nh:</label>
            <select
              id="gender"
              value={gender}
              onChange={(e) => setGender(e.target.value)}
              disabled={!isEditingBMI}
            >
              <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
              <option value="male">Nam</option>
              <option value="female">N·ªØ</option>
            </select>
          </div>

          <div className="form-row">
            <label htmlFor="ageMonths">Tu·ªïi (th√°ng):</label>
            <input
              id="ageMonths"
              type="number"
              min="1"
              value={ageMonths}
              onChange={(e) => setAgeMonths(e.target.value)}
              disabled={!isEditingBMI}
            />
          </div>

          <div className="btn-group">
          
            <button
              onClick={() => {
                if (!weight || !height || !gender || !ageMonths) {
                  alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi l∆∞u BMI!");
                  return;
                }

                // C·∫≠p nh·∫≠t tempBMI ƒë·ªÉ l·∫ßn sau s·ª≠a v·∫´n c√≥ gi√° tr·ªã chu·∫©n
                setTempBMI({ weight, height, gender, ageMonths });

                // T√≠nh BMI
                const hMeters = Number(height) / 100;
                const bmiValue = Number(weight) / (hMeters * hMeters);
                setBmi(bmiValue.toFixed(1));

                if (bmiValue < 18.5) setBmiCategory("G·∫ßy");
                else if (bmiValue < 25) setBmiCategory("B√¨nh th∆∞·ªùng");
                else if (bmiValue < 30) setBmiCategory("Th·ª´a c√¢n");
                else setBmiCategory("B√©o ph√¨");

                setIsEditingBMI(false); // Kh√≥a input, n√∫t H·ªßy th√†nh S·ª≠a
              }}
            >
              L∆∞u
            </button>
           
            <button
              onClick={() => {
                if (isEditingBMI) {
                  // H·ªßy -> ph·ª•c h·ªìi gi√° tr·ªã t·ª´ tempBMI
                  setWeight(tempBMI.weight);
                  setHeight(tempBMI.height);
                  setGender(tempBMI.gender);
                  setAgeMonths(tempBMI.ageMonths);
                } else {
                  // S·ª≠a -> l∆∞u gi√° tr·ªã hi·ªán t·∫°i v√†o tempBMI
                  setTempBMI({ weight, height, gender, ageMonths });
                }
                setIsEditingBMI(!isEditingBMI);
              }}
            >
              {isEditingBMI ? "H·ªßy" : "S·ª≠a"}
            </button>
          </div>

          {bmi && (
            <p>
              üëâ BMI c·ªßa b√© l√† <b>{bmi}</b> ({bmiCategory})
            </p>
          )}
        </div>

        {/* --- ƒÇn u·ªëng --- */}
        <div className="card">
          <h3>B√© c√≥ ƒÉn t·∫°i tr∆∞·ªùng h√¥m nay?</h3>
          <input
            type="date"
            defaultValue={new Date().toISOString().split("T")[0]}
          />

          <div className="checkbox-field">
            <input
              type="checkbox"
              id="eatAtSchool"
              checked={ateAtSchool}
              onChange={(e) => setAteAtSchool(e.target.checked)}
            />
            <label htmlFor="eatAtSchool">ƒê√£ ƒÉn t·∫°i tr∆∞·ªùng</label>
          </div>

          <h3>M·ª©c ƒë·ªô ƒÉn (∆∞·ªõc l∆∞·ª£ng % kh·∫©u ph·∫ßn)</h3>
          <input
            type="range"
            min="0"
            max="100"
            step="5"
            onChange={(e) => setMealPercent(Number(e.target.value))}
          />
          <p>üëâ B√© ƒë√£ ƒÉn kho·∫£ng <b>{mealPercent || 0}%</b></p>

          <h3>Ghi ch√∫ b·ªØa ƒÉn</h3>
          <textarea
            placeholder="Nh·∫≠p ghi ch√∫..."
            onChange={(e) => setMealNote(e.target.value)}
          ></textarea>

          <button
            onClick={() => {
              console.log("Th√¥ng tin ƒÉn t·∫°i tr∆∞·ªùng:", { ateAtSchool, mealPercent, mealNote });
              alert("ƒê√£ l∆∞u th√¥ng tin ƒÉn t·∫°i tr∆∞·ªùng!");
            }}
          >
            L∆∞u
          </button>
        </div>

        {/* --- D·ªã ·ª©ng --- */}
        <div className="card">
          <h3>B√© b·ªã d·ªã ·ª©ng v·ªõi:</h3>
          <div className="allergy-input">
            <input
              type="text"
              placeholder="Nh·∫≠p v√† nh·∫•n Enter"
              value={newAllergy}
              onChange={(e) => setNewAllergy(e.target.value)}
              onKeyDown={handleKeyDown}
            />
            <button onClick={handleAddAllergy}>+ Th√™m</button>
          </div>
          {allergies.length > 0 && (
            <>
              <h3 style={{ marginTop: "15px" }}>Danh s√°ch d·ªã ·ª©ng</h3>
              <div className="tags">
                {allergies.map((item, index) => (
                  <span key={index}>
                    {item}{" "}
                    <button
                      onClick={() => setAllergies(allergies.filter((_, i) => i !== index))}
                    >
                      x
                    </button>
                  </span>
                ))}
              </div>
            </>
          )}
          <h3 style={{ marginTop: "15px" }}>G·ª£i √Ω nhanh</h3>
          <div className="tags">
            {QUICK_SUGGESTIONS.map((item) => (
              <span
                key={item}
                onClick={() => {
                  if (!allergies.includes(item)) setAllergies([...allergies, item]);
                }}
              >
                {item}
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default HealthManager;
